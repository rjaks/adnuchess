import { defineEventHandler, getRouterParam, readBody, getCookie, createError } from 'h3'
import { getUserSession } from '~/server/utils/sessionStore'

export default defineEventHandler(async (event) => {
  const gameId = getRouterParam(event, 'id')
  const { move } = await readBody(event)
  
  // Authenticate user
  const sessionId = getCookie(event, 'adnu_session')
  if (!sessionId) {
    throw createError({ statusCode: 401, statusMessage: 'Authentication required' })
  }
  
  const session = await getUserSession(sessionId)
  if (!session) {
    throw createError({ statusCode: 401, statusMessage: 'Session expired' })
  }

  if (!gameId || !move) {
    throw createError({
      statusCode: 400,
      statusMessage: 'Game ID and move are required'
    })
  }

  try {
    const { $convex } = event.context
    
    // Make move through Convex
    const result = await $convex.mutation('games:makeMove', {
      gameId,
      move,
      playerId: session.user.id
    })
    
    // Get updated game state
    const updatedGame = await $convex.query('games:getGameById', { gameId })
    
    return {
      success: true,
      gameState: {
        id: updatedGame.gameId,
        fen: updatedGame.fen,
        lastMove: updatedGame.lastMove,
        lastMoveTime: updatedGame.lastMoveTime,
        currentTurn: updatedGame.currentTurn,
        player1: updatedGame.player1,
        player2: updatedGame.player2,
        status: updatedGame.status,
        winner: updatedGame.winner,
        gameMode: updatedGame.gameMode,
        createdAt: updatedGame.createdAt,
        moveHistory: updatedGame.moveHistory
      }
    }
  } catch (error) {
    console.error('Failed to make move:', error)
    throw createError({
      statusCode: 500,
      statusMessage: error.message || 'Failed to process move'
    })
  }
})
